// Copyright (C) 2022  ilobilo

#pragma once

#include <frg/allocation.hpp>
#include <initializer_list>
#include <functional>
#include <algorithm>
#include <utility>
#include <cassert>
#include <memory>
#include <tuple>

#define BUCKET_COUNT 10
#define BUCKET_INC(size) size + BUCKET_COUNT / 2

namespace std
{
    namespace detail
    {
        template<typename Allocator, typename U>
        struct replace_alloc_type { };

        template<template<typename> typename Allocator, typename U, typename Type>
        struct replace_alloc_type<Allocator<Type>, U>
        {
            using type = Allocator<U>;
        };

        template<typename Allocator, typename U>
        using replace_alloc_type_t = typename replace_alloc_type<Allocator, U>::type;

    } // namespace detail

    template<typename Key, typename Type, typename Hash = hash<Key>, typename KeyEqual = equal_to<Key>, typename Allocator = allocator<pair<const Key, Type>>>
    class unordered_map
    {
        public:
        using key_type = Key;
        using mapped_type = Type;
        using value_type = pair<const Key, Type>;
        using size_type = size_t;
        using difference_type = ptrdiff_t;
        using hasher = Hash;
        using key_equal = KeyEqual;
        using allocator_type = Allocator;
        using reference = value_type&;
        using const_reference = const value_type&;
        using pointer = value_type*;
        using const_pointer = const value_type*;

        private:
        struct hash_node
        {
            friend class unordered_map;
            value_type val;
            hash_node *next;

            hash_node(const value_type &val) : val(val) { }
            hash_node(value_type &&val) : val(move(val)) { }
        };

        size_type _size = 0;
        size_type _cap = 0;
        Hash _hash;
        KeyEqual _keyequal;

        Allocator _allocator;
        detail::replace_alloc_type_t<Allocator, hash_node> _node_allocator;
        detail::replace_alloc_type_t<Allocator, hash_node*> _table_allocator;

        hash_node **_table = nullptr;

        void destruct(hash_node *node)
        {
            if (node == nullptr)
                return;
            node->~hash_node();
            this->_node_allocator.deallocate(node, 1);
        }

        hash_node *construct(const value_type &val)
        {
            auto ret = this->_node_allocator.allocate(1);
            return new(ret) hash_node(val);
        }

        hash_node *construct(value_type &&val)
        {
            auto ret = this->_node_allocator.allocate(1);
            return new(ret) hash_node(move(val));
        }

        public:
        class iterator
        {
            friend class unordered_map;
            private:
            unordered_map *map;
            hash_node *node;
            size_type bucket;

            iterator(unordered_map *map, size_type bucket, hash_node *node) : map(map), node(node), bucket(bucket) { }

            public:
            iterator &operator++()
            {
                assert(this->node);
                this->node = this->node->next;
                if (this->node != nullptr)
                    return *this;

                assert(this->bucket < this->map->_cap);
                while (true)
                {
                    this->bucket++;
                    if (this->bucket == this->map->_cap)
                        break;
                    this->node = this->map->_table[bucket];
                    if (this->node != nullptr)
                        break;
                }

                return *this;
            }

            bool operator==(const iterator &other) const
            {
                return this->bucket == other.bucket && this->node == other.node;
            }

            value_type &operator*()
            {
                return this->node->val;
            }

            value_type *operator->()
            {
                return &this->node->val;
            }

            operator bool()
            {
                return this->node != nullptr;
            }
        };

        class const_iterator
        {
            friend class unordered_map;
            friend class iterator;

            private:
            const unordered_map *map;
            const hash_node *node;
            size_type bucket;

            const_iterator(const unordered_map *map, size_type bucket, const hash_node *node) : map(map), node(node), bucket(bucket) { }
            const_iterator(const iterator &it) : map(it.map), node(it.node), bucket(it.bucket) { }

            public:
            const_iterator &operator++()
            {
                assert(this->node);
                this->node = this->node->next;
                if (this->node != nullptr)
                    return *this;

                assert(this->bucket < this->map->_cap);
                while (true)
                {
                    this->bucket++;
                    if (this->bucket == this->map->_cap)
                        break;
                    this->node = this->map->_table[bucket];
                    if (this->node != nullptr)
                        break;
                }

                return *this;
            }

            bool operator==(const iterator &other) const
            {
                return this->bucket == other->bucket && this->node == other->node;
            }

            const value_type &operator*() const
            {
                return this->node->val;
            }

            const value_type *operator->() const
            {
                return &this->node->val;
            }

            operator bool() const
            {
                return this->node != nullptr;
            }
        };

        private:
        pair<iterator, bool> _insert(const value_type &value, bool assign = false)
        {
            if (this->_size >= this->_cap)
                this->rehash(BUCKET_INC(this->_size));

            size_type bucket = this->_hash(value.first) % this->_cap;

            hash_node *prev = nullptr;
            auto node = this->_table[bucket];
            while (node != nullptr && this->_keyequal(node->val.first, value.first) == false)
            {
                prev = node;
                node = node->next;
            }

            if (node != nullptr)
            {
                if (assign == false)
                    return { iterator(this, bucket, node), false };

                node->val.second = value.second;
            }
            else
            {
                node = this->construct(value);
                if (prev == nullptr)
                    this->_table[bucket] = node;
                else
                    prev->next = node;
                this->_size++;
            }

            return { iterator(this, bucket, node), true };
        }

        iterator _at(const Key &key, bool insert = false)
        {
            if (this->_size == 0)
            {
                if (insert == true)
                    return this->emplace(piecewise_construct, forward_as_tuple(key), tuple<>()).first;
                return iterator(this, this->_cap, nullptr);
            }

            size_type bucket = this->_hash(key) % this->_cap;
            for (auto node = this->_table[bucket]; node != nullptr; node = node->next)
            {
                if (this->_keyequal(node->val.first, key) == true)
                    return iterator(this, bucket, node);
            }

            if (insert == true)
                return this->emplace(piecewise_construct, forward_as_tuple(key), tuple<>()).first;
            return iterator(this, this->_cap, nullptr);
        }

        const_iterator _at(const Key &key) const
        {
            if (this->_size == 0)
                return const_iterator(this, this->_cap, nullptr);

            size_type bucket = this->_hash(key) % this->_cap;
            for (auto node = this->_table[bucket]; node != nullptr; node = node->next)
            {
                if (this->_keyequal(node->val.first, key) == true)
                    return const_iterator(this, bucket, node);
            }

            return const_iterator(this, this->_cap, nullptr);
        }

        public:
        unordered_map() : unordered_map(size_type(BUCKET_COUNT)) { }
        explicit unordered_map(size_type bucket_count, const Hash &hash = Hash(), const KeyEqual &equal = KeyEqual(), const Allocator &alloc = Allocator()) : _size(0), _cap(0), _hash(hash), _keyequal(equal), _allocator(alloc), _table(nullptr)
        {
            this->rehash(bucket_count);
        }

        unordered_map(size_type bucket_count, const Allocator &alloc) : unordered_map(bucket_count, Hash(), KeyEqual(), alloc) { }
        unordered_map(size_type bucket_count, const Hash &hash, const Allocator &alloc) : unordered_map(bucket_count, hash, KeyEqual(), alloc) { }

        explicit unordered_map(const Allocator &alloc) : unordered_map(size_type(BUCKET_COUNT), Hash(), KeyEqual(), alloc) { }

        unordered_map(const unordered_map &other, const Allocator &alloc) : unordered_map(other._size, other._hash, other._keyequal, alloc)
        {
            for (const auto &item : other)
                this->insert(item);
        }
        unordered_map(const unordered_map &other) : unordered_map(other, other._allocator) { }

        unordered_map(unordered_map &&other, const Allocator &alloc) : _size(move(other._size)), _cap(move(other._cap)), _hash(move(other._hash)), _keyequal(move(other._keyequal)), _allocator(move(other._allocator)), _node_allocator(move(other._node_allocator)), _table_allocator(move(other._table_allocator)), _table(move(other._table)) { }
        unordered_map(unordered_map &&other) : unordered_map(other, move(other._allocator)) { }

        unordered_map(initializer_list<value_type> init, size_type bucket_count = BUCKET_COUNT, const Hash &hash = Hash(), const KeyEqual &equal = KeyEqual(), const Allocator &alloc = Allocator()) : _size(0), _cap(0), _hash(hash), _keyequal(equal), _allocator(alloc)
        {
            this->rehash(max(init.size(), bucket_count));

            for (const auto &value : init)
                this->insert(value);
        }

        unordered_map(initializer_list<value_type> init, size_type bucket_count, const Allocator &alloc) : unordered_map(init, bucket_count, Hash(), KeyEqual(), alloc) { }
        unordered_map(initializer_list<value_type> init, size_type bucket_count, const Hash &hash, const Allocator &alloc) : unordered_map(init, bucket_count, hash, KeyEqual(), alloc) { }

        ~unordered_map()
        {
            this->clear();
            if (this->_table != nullptr)
                this->_table_allocator.deallocate(this->_table, this->_cap);
        }

        unordered_map &operator=(const unordered_map &other)
        {
            if (this != addressof(other))
            {
                this->clear();

                this->_hash = other._hash;
                this->_keyequal = other._keyequal;
                this->_allocator = other._allocator;
                this->_node_allocator = other._node_allocator;
                this->_table_allocator = other._table_allocator;

                for (const auto &item : other)
                    this->insert(item);
            }
            return *this;
        }

        unordered_map &operator=(unordered_map &&other)
        {
            if (this != addressof(other))
            {
                this->clear();
                this->swap(other);
            }
            return *this;
        }

        unordered_map &operator=(initializer_list<value_type> ilist)
        {
            this->clear();
            this->insert(ilist);
            return *this;
        }

        allocator_type get_allocator() const
        {
            return this->_allocator;
        }

        iterator begin()
        {
            if (this->_size == 0)
                return iterator(this, this->_cap, nullptr);

            for (size_type i = 0; i < this->_cap; i++)
                if (this->_table[i] != nullptr)
                    return iterator(this, i, this->_table[i]);

            return iterator(this, this->_cap, nullptr);
        }

        const_iterator begin() const
        {
            if (this->_size == 0)
                return const_iterator(this, this->_cap, nullptr);

            for (size_type i = 0; i < this->_cap; i++)
                if (this->_table[i] != nullptr)
                    return const_iterator(this, i, this->_table[i]);

            return const_iterator(this, this->_cap, nullptr);
        }

        const_iterator cbegin() const
        {
            return this->begin();
        }

        iterator end()
        {
            return iterator(this, this->_cap, nullptr);
        }

        const_iterator end() const
        {
            return const_iterator(this, this->_cap, nullptr);
        }

        const_iterator cend() const
        {
            return this->end();
        }

        [[nodiscard]] bool empty() const
        {
            return this->_size == 0;
        }

        size_type size() const
        {
            return this->_size;
        }

        void clear()
        {
            for (size_type i = 0; i < this->_cap; i++)
            {
                auto node = this->_table[i];
                while (node != nullptr)
                {
                    auto next = node->next;
                    this->destruct(node);
                    node = next;
                }
            }
            this->_size = 0;
        }

        pair<iterator, bool> insert(const value_type &value)
        {
            return this->_insert(value);
        }

        pair<iterator, bool> insert(value_type &&value)
        {
            return this->_insert(move(value));
        }

        template<typename P> requires is_constructible_v<value_type, P&&>
        pair<iterator, bool> insert(P &&value)
        {
            return this->emplace(forward<P>(value));
        }

        void insert(initializer_list<value_type> ilist)
        {
            if (ilist.size() + this->_size > this->_cap)
                this->rehash(ilist.size() + this->_size);

            for (const auto &value : ilist)
                this->_insert(value);
        }

        template<typename M>
        pair<iterator, bool> insert_or_assign(const Key &k, M &&obj)
        {
            return this->_insert(value_type(k, forward<M>(obj)), true);
        }

        template<typename M>
        pair<iterator, bool> insert_or_assign(Key &&k, M &&obj)
        {
            return this->_insert(value_type(move(k), forward<M>(obj)), true);
        }

        template<typename ...Args>
        pair<iterator, bool> emplace(Args &&...args)
        {
            return this->_insert(value_type(std::forward<Args>(args)...), false);
        }

        template<typename ...Args>
        pair<iterator, bool> try_emplace(const Key &k, Args &&...args)
        {
            return this->_insert(value_type(piecewise_construct, forward_as_tuple(k), forward_as_tuple(forward<Args>(args)...)));
        }

        template<typename ...Args>
        pair<iterator, bool> try_emplace(Key &&k, Args &&...args)
        {
            return this->_insert(value_type(piecewise_construct, forward_as_tuple(move(k)), forward_as_tuple(forward<Args>(args)...)));
        }

        // TODO
        // iterator erase(iterator pos)
        // {
        // }

        // TODO
        // iterator erase(const_iterator pos)
        // {
        // }

        // TODO
        // iterator erase(const_iterator first, const_iterator last)
        // {
        // }

        size_type erase(const Key &key)
        {
            if (this->_size == 0)
                return 0;

            size_type bucket = this->_hash(key) % this->_cap;

            hash_node *prev = nullptr;
            for (auto node = this->_table[bucket]; node != nullptr; node = node->next)
            {
                if (this->_keyequal(node->val.first, key) == true)
                {
                    if (prev == nullptr)
                        this->_table[bucket] = node->next;
                    else
                        prev->next = node->next;

                    this->destruct(node);
                    this->_size--;

                    return 1;
                }

                prev = node;
            }

            return 0;
        }

        // TODO
        // template<typename K>
        // size_type erase(K &&x)
        // {
        // }

        void swap(unordered_map &other)
        {
            using std::swap;
            swap(this->_size, other._size);
            swap(this->_cap, other._cap);
            swap(this->_hash, other._hash);
            swap(this->_keyequal, other._keyequal);
            swap(this->_allocator, other._allocator);
            swap(this->_node_allocator, other._node_allocator);
            swap(this->_table_allocator, other._table_allocator);
            swap(this->_table, other._table);
        }

        Type &at(const Key &key)
        {
            auto ret = this->_at(key, false);
            assert(ret != false);
            return ret->second;
        }

        const Type &at(const Key &key) const
        {
            auto ret = this->_at(key, false);
            assert(ret != false);
            return ret->second;
        }

        Type &operator[](const Key &key)
        {
            return this->_at(key, true)->second;
        }

        Type &operator[](Key &&key)
        {
            return this->_at(move(key), true)->second;
        }

        size_type count(const Key &key) const
        {
            size_type ret = 0;
            size_type bucket = this->_hash(key) % this->_cap;

            for (auto node = this->_table[bucket]; node != nullptr; node = node->next)
                if (this->_keyequal(node->val.first, key) == true) ret++;

            return ret;
        }

        iterator find(const Key &key)
        {
            return this->_at(key);
        }

        const_iterator find(const Key &key) const
        {
            return this->_at(key);
        }

        bool contains(const Key &key) const
        {
            return this->find(key);
        }

        // TODO
        // size_type bucket_count() const
        // {
        // }

        // TODO
        // size_type bucket_size(size_type n) const
        // {
        // }

        // TODO
        // size_type bucket(const Key &key) const
        // {
        // }

        void rehash(size_type count)
        {
            count = max(count, size_type(BUCKET_COUNT));

            auto new_table = this->_table_allocator.allocate(count);
            for (size_type i = 0; i < count; i++)
                new_table[i] = nullptr;

            if (this->_table != nullptr)
            {
                for (size_type i = 0; i < this->_cap; i++)
                {
                    auto node = this->_table[i];
                    while (node != nullptr)
                    {
                        auto bucket = this->_hash(node->val.first) % count;
                        auto next = node->next;
                        node->next = new_table[bucket];
                        new_table[bucket] = node;
                        node = next;
                    }
                }
                this->_table_allocator.deallocate(this->_table, this->_cap);
            }

            this->_table = new_table;
            this->_cap = count;
        }

        hasher hash_function() const
        {
            return this->_hash;
        }

        key_equal key_eq() const
        {
            return this->_keyequal;
        }

        void swap(unordered_map &lhs, unordered_map &rhs)
        {
            lhs.swap(rhs);
        }
    };
} // namespace std