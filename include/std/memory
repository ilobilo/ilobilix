// Copyright (C) 2022  ilobilo

#pragma once

#include_next <memory>
#include <smart_ptr>
#include <new>

namespace std
{
    template<typename Type>
    struct allocator
    {
        using value_type = Type;
        using pointer = Type*;
        using const_pointer = const Type*;
        using reference = Type&;
        using const_reference = const Type&;
        using size_type = size_t;
        using difference_type = ptrdiff_t;

        [[nodiscard]] constexpr Type *allocate(size_t size)
        {
            return static_cast<Type*>(::operator new(size * sizeof(Type)));
        }

        constexpr void deallocate(Type *ptr, size_t = 0)
        {
            ::operator delete(ptr);
        }

        friend constexpr bool operator==(const allocator &, const allocator &) noexcept
        {
            return true;
        }
    };

    template<typename Type>
    struct frigg_allocator : allocator<Type>
    {
        [[nodiscard]] constexpr Type *allocate(size_t size)
        {
            return static_cast<Type*>(::operator new(size));
        }

        constexpr void free(Type *ptr, size_t = 0)
        {
            ::operator delete(ptr);
        }
    };
} // namespace std