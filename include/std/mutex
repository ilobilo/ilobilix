// Copyright (C) 2022-2023  ilobilo

#pragma once

#include <atomic>

namespace arch { void pause(); }
struct ticket_lock
{
    private:
    std::atomic_size_t _next_ticket;
    std::atomic_size_t _serving_ticket;

    public:
    constexpr ticket_lock() : _next_ticket(0), _serving_ticket(0) { }

    ticket_lock(const ticket_lock &) = delete;
    ticket_lock &operator=(const ticket_lock &) = delete;

    void lock()
    {
        auto ticket = this->_next_ticket.fetch_add(1, std::memory_order_relaxed);
        while (this->_serving_ticket.load(std::memory_order_acquire) != ticket)
            arch::pause();
    }

    void unlock()
    {
        if (this->is_locked() == false)
            return;

        auto current = this->_serving_ticket.load(std::memory_order_relaxed);
        this->_serving_ticket.store(current + 1, std::memory_order_release);
    }

    bool is_locked()
    {
        auto current = this->_serving_ticket.load(std::memory_order_relaxed);
        auto next = this->_next_ticket.load(std::memory_order_relaxed);
        return current != next;
    }

    bool try_lock()
    {
        if (this->is_locked())
            return false;

        this->lock();
        return true;
    }
};

namespace std
{
    using mutex = ::ticket_lock;

    struct defer_lock_t { explicit defer_lock_t() = default; };
    struct try_to_lock_t { explicit try_to_lock_t() = default; };
    struct adopt_lock_t { explicit adopt_lock_t() = default; };

    inline constexpr defer_lock_t  defer_lock { };
    inline constexpr try_to_lock_t try_to_lock { };
    inline constexpr adopt_lock_t  adopt_lock { };

    template<typename Type>
    class unique_lock
    {
        private:
        Type *_mutex;
        bool _locked;

        public:
        using mutex_type = Type;

        unique_lock() : _mutex(nullptr), _locked(false) { }

        unique_lock(unique_lock &&other) noexcept : _mutex(nullptr), _locked(false)
        {
            this->swap(other);
        }

        explicit unique_lock(mutex_type &m) : _mutex(addressof(m)), _locked(true) { m.lock(); }
        unique_lock(mutex_type &m, defer_lock_t t) noexcept : _mutex(addressof(m)), _locked(false) { }
        unique_lock(mutex_type &m, try_to_lock_t t) : _mutex(addressof(m)), _locked(true) { m.try_lock(); }
        unique_lock(mutex_type &m, adopt_lock_t t) : _mutex(addressof(m)), _locked(true) { }

        ~unique_lock()
        {
            if (this->_locked)
                this->_mutex->unlock();
        }

        unique_lock &operator=(unique_lock &&other)
        {
            if (this->_locked == true)
                this->unlock();

            this->swap(other);
            return *this;
        }

        void lock()
        {
            if (this->_mutex)
            {
                this->_mutex->lock();
                this->_locked = true;
            }
        }

        bool try_lock()
        {
            if (this->_mutex)
            {
                auto ret = this->_mutex->try_lock();
                if (ret == true)
                    this->_locked = true;
                return ret;
            }
            return false;
        }

        void unlock()
        {
            if (this->_mutex)
            {
                this->_mutex->unlock();
                this->_locked = false;
            }
        }

        void swap(unique_lock &other) noexcept
        {
            using std::swap;
            swap(this->_mutex, other._mutex);
            swap(this->_locked, other._locked);
        }

        mutex_type *release() noexcept
        {
            auto ret = this->_mutex;
            this->_mutex = nullptr;
            this->_locked = false;
            return ret;
        }

        mutex_type *mutex() const noexcept
        {
            return this->_mutex;
        }

        bool owns_lock() const noexcept
        {
            return this->_locked;
        }

        explicit operator bool() const noexcept
        {
            return this->owns_lock();
        }

        friend void swap(unique_lock &lhs, unique_lock &rhs) noexcept
        {
            return lhs.swap(rhs);
        }
    };

    template<typename L0, typename L1>
    void lock(L0 &l0, L1 &l1)
    {
        while (true)
        {
            {
                unique_lock<L0> u0(l0);
                if (l1.try_lock())
                {
                    u0.release();
                    break;
                }
            }
            {
                unique_lock<L1> u1(l1);
                if (l0.try_lock())
                {
                    u1.release();
                    break;
                }
            }
        }
    }
} // namespace std