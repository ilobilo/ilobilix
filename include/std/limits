// Copyright (C) 2022  ilobilo

#pragma once

#include <climits>

namespace std
{
    #define __is_signed(Type) ((Type)(-1) < (Type)(0))
    #define __digits(Type) (CHAR_BIT * sizeof(Type) - __is_signed(Type))
    #define __digits10(Type) (__digits(Type) * 643L / 2136)

    enum float_round_style
    {
        round_indeterminate = -1,
        round_toward_zero = 0,
        round_to_nearest = 1,
        round_toward_infinity = 2,
        round_toward_neg_infinity = 3
    };

    enum float_denorm_style
    {
        denorm_indeterminate = -1,
        denorm_absent = 0,
        denorm_present = 1
    };

    template<typename Type>
    class numeric_limits
    {
        public:
        static constexpr bool is_specialized = false;
        static constexpr bool is_signed = false;
        static constexpr bool is_integer = false;
        static constexpr bool is_exact = false;

        static constexpr bool has_infinity = false;
        static constexpr bool has_quiet_NaN = false;
        static constexpr bool has_signaling_NaN = false;
        static constexpr float_denorm_style has_denorm = denorm_absent;
        static constexpr bool has_denorm_loss = false;

        static constexpr float_round_style round_style = round_toward_zero;

        static constexpr bool is_iec559 = false;
        static constexpr bool is_bounded = false;
        static constexpr bool is_modulo = false;

        static constexpr int digits = 0;
        static constexpr int digits10 = 0;
        static constexpr int max_digits10 = 0;

        static constexpr int radix = 0;

        static constexpr int min_exponent = 0;
        static constexpr int min_exponent10 = 0;
        static constexpr int max_exponent = 0;
        static constexpr int max_exponent10 = 0;

        static constexpr bool traps = false;
        static constexpr bool tinyness_before = false;

        static constexpr Type min() noexcept { return Type(); }
        static constexpr Type lowest() noexcept { return Type(); }
        static constexpr Type max() noexcept { return Type(); }

        static constexpr Type epsilon() noexcept { return Type(); }
        static constexpr Type round_error() noexcept { return Type(); }

        static constexpr Type infinity() noexcept { return Type(); }
        static constexpr Type quiet_NaN() noexcept { return Type(); }
        static constexpr Type signaling_NaN() noexcept { return Type(); }
        static constexpr Type denorm_min() noexcept { return Type(); }
    };

    template<>
    class numeric_limits<bool>
    {
        public:
        static constexpr bool is_specialized = true;
        static constexpr bool is_signed = false;
        static constexpr bool is_integer = true;
        static constexpr bool is_exact = true;

        static constexpr bool has_infinity = false;
        static constexpr bool has_quiet_NaN = false;
        static constexpr bool has_signaling_NaN = false;
        static constexpr float_denorm_style has_denorm = denorm_absent;
        static constexpr bool has_denorm_loss = false;

        static constexpr float_round_style round_style = round_toward_zero;

        static constexpr bool is_iec559 = false;
        static constexpr bool is_bounded = true;
        static constexpr bool is_modulo = false;

        static constexpr int digits = 1;
        static constexpr int digits10 = 0;
        static constexpr int max_digits10 = 0;

        static constexpr int radix = 2;

        static constexpr int min_exponent = 0;
        static constexpr int min_exponent10 = 0;
        static constexpr int max_exponent = 0;
        static constexpr int max_exponent10 = 0;

        static constexpr bool traps = false;
        static constexpr bool tinyness_before = false;

        static constexpr bool min() noexcept { return false; }
        static constexpr bool lowest() noexcept { return false; }
        static constexpr bool max() noexcept { return true; }

        static constexpr bool epsilon() noexcept { return false; }
        static constexpr bool round_error() noexcept { return false; }

        static constexpr bool infinity() noexcept { return false; }
        static constexpr bool quiet_NaN() noexcept { return false; }
        static constexpr bool signaling_NaN() noexcept { return false; }
        static constexpr bool denorm_min() noexcept { return false; }
    };

    template<>
    class numeric_limits<char>
    {
        public:
        static constexpr bool is_specialized = true;
        static constexpr bool is_signed = __is_signed(char);
        static constexpr bool is_integer = true;
        static constexpr bool is_exact = true;

        static constexpr bool has_infinity = false;
        static constexpr bool has_quiet_NaN = false;
        static constexpr bool has_signaling_NaN = false;
        static constexpr float_denorm_style has_denorm = denorm_absent;
        static constexpr bool has_denorm_loss = false;

        static constexpr float_round_style round_style = round_toward_zero;

        static constexpr bool is_iec559 = false;
        static constexpr bool is_bounded = true;
        static constexpr bool is_modulo = !is_signed;

        static constexpr int digits = __digits(char);
        static constexpr int digits10 = __digits10(char);
        static constexpr int max_digits10 = 0;

        static constexpr int radix = 2;

        static constexpr int min_exponent = 0;
        static constexpr int min_exponent10 = 0;
        static constexpr int max_exponent = 0;
        static constexpr int max_exponent10 = 0;

        static constexpr bool traps = true;
        static constexpr bool tinyness_before = false;

        static constexpr char min() noexcept { return CHAR_MIN; }
        static constexpr char lowest() noexcept { return CHAR_MIN; }
        static constexpr char max() noexcept { return CHAR_MAX; }

        static constexpr char epsilon() noexcept { return 0; }
        static constexpr char round_error() noexcept { return 0; }

        static constexpr char infinity() noexcept { return 0; }
        static constexpr char quiet_NaN() noexcept { return 0; }
        static constexpr char signaling_NaN() noexcept { return 0; }
        static constexpr char denorm_min() noexcept { return 0; }
    };

    template<>
    class numeric_limits<signed char>
    {
        public:
        static constexpr bool is_specialized = true;
        static constexpr bool is_signed = true;
        static constexpr bool is_integer = true;
        static constexpr bool is_exact = true;

        static constexpr bool has_infinity = false;
        static constexpr bool has_quiet_NaN = false;
        static constexpr bool has_signaling_NaN = false;
        static constexpr float_denorm_style has_denorm = denorm_absent;
        static constexpr bool has_denorm_loss = false;

        static constexpr float_round_style round_style = round_toward_zero;

        static constexpr bool is_iec559 = false;
        static constexpr bool is_bounded = true;
        static constexpr bool is_modulo = false;

        static constexpr int digits = __digits(signed char);
        static constexpr int digits10 = __digits10(signed char);
        static constexpr int max_digits10 = 0;

        static constexpr int radix = 2;

        static constexpr int min_exponent = 0;
        static constexpr int min_exponent10 = 0;
        static constexpr int max_exponent = 0;
        static constexpr int max_exponent10 = 0;

        static constexpr bool traps = true;
        static constexpr bool tinyness_before = false;

        static constexpr signed char min() noexcept { return SCHAR_MIN; }
        static constexpr signed char lowest() noexcept { return SCHAR_MIN; }
        static constexpr signed char max() noexcept { return SCHAR_MAX; }

        static constexpr signed char epsilon() noexcept { return 0; }
        static constexpr signed char round_error() noexcept { return 0; }

        static constexpr signed char infinity() noexcept { return 0; }
        static constexpr signed char quiet_NaN() noexcept { return 0; }
        static constexpr signed char signaling_NaN() noexcept { return 0; }
        static constexpr signed char denorm_min() noexcept { return 0; }
    };

    template<>
    class numeric_limits<unsigned char>
    {
        public:
        static constexpr bool is_specialized = true;
        static constexpr bool is_signed = false;
        static constexpr bool is_integer = true;
        static constexpr bool is_exact = true;

        static constexpr bool has_infinity = false;
        static constexpr bool has_quiet_NaN = false;
        static constexpr bool has_signaling_NaN = false;
        static constexpr float_denorm_style has_denorm = denorm_absent;
        static constexpr bool has_denorm_loss = false;

        static constexpr float_round_style round_style = round_toward_zero;

        static constexpr bool is_iec559 = false;
        static constexpr bool is_bounded = true;
        static constexpr bool is_modulo = true;

        static constexpr int digits = __digits(unsigned char);
        static constexpr int digits10 = __digits10(unsigned char);
        static constexpr int max_digits10 = 0;

        static constexpr int radix = 2;

        static constexpr int min_exponent = 0;
        static constexpr int min_exponent10 = 0;
        static constexpr int max_exponent = 0;
        static constexpr int max_exponent10 = 0;

        static constexpr bool traps = true;
        static constexpr bool tinyness_before = false;

        static constexpr unsigned char min() noexcept { return 0; }
        static constexpr unsigned char lowest() noexcept { return 0; }
        static constexpr unsigned char max() noexcept { return UCHAR_MAX; }

        static constexpr unsigned char epsilon() noexcept { return 0; }
        static constexpr unsigned char round_error() noexcept { return 0; }

        static constexpr unsigned char infinity() noexcept { return 0; }
        static constexpr unsigned char quiet_NaN() noexcept { return 0; }
        static constexpr unsigned char signaling_NaN() noexcept { return 0; }
        static constexpr unsigned char denorm_min() noexcept { return 0; }
    };

    template<>
    class numeric_limits<wchar_t>
    {
        public:
        static constexpr bool is_specialized = true;
        static constexpr bool is_signed = __is_signed(wchar_t);
        static constexpr bool is_integer = true;
        static constexpr bool is_exact = true;

        static constexpr bool has_infinity = false;
        static constexpr bool has_quiet_NaN = false;
        static constexpr bool has_signaling_NaN = false;
        static constexpr float_denorm_style has_denorm = denorm_absent;
        static constexpr bool has_denorm_loss = false;

        static constexpr float_round_style round_style = round_toward_zero;

        static constexpr bool is_iec559 = false;
        static constexpr bool is_bounded = true;
        static constexpr bool is_modulo = !is_signed;

        static constexpr int digits = __digits(wchar_t);
        static constexpr int digits10 = __digits10(wchar_t);
        static constexpr int max_digits10 = 0;

        static constexpr int radix = 2;

        static constexpr int min_exponent = 0;
        static constexpr int min_exponent10 = 0;
        static constexpr int max_exponent = 0;
        static constexpr int max_exponent10 = 0;

        static constexpr bool traps = true;
        static constexpr bool tinyness_before = false;

        static constexpr wchar_t min() noexcept { return WCHAR_MIN; }
        static constexpr wchar_t lowest() noexcept { return WCHAR_MIN; }
        static constexpr wchar_t max() noexcept { return WCHAR_MAX; }

        static constexpr wchar_t epsilon() noexcept { return 0; }
        static constexpr wchar_t round_error() noexcept { return 0; }

        static constexpr wchar_t infinity() noexcept { return 0; }
        static constexpr wchar_t quiet_NaN() noexcept { return 0; }
        static constexpr wchar_t signaling_NaN() noexcept { return 0; }
        static constexpr wchar_t denorm_min() noexcept { return 0; }
    };

    template<>
    class numeric_limits<char8_t>
    {
        public:
        static constexpr bool is_specialized = true;
        static constexpr bool is_signed = false;
        static constexpr bool is_integer = true;
        static constexpr bool is_exact = true;

        static constexpr bool has_infinity = false;
        static constexpr bool has_quiet_NaN = false;
        static constexpr bool has_signaling_NaN = false;
        static constexpr float_denorm_style has_denorm = denorm_absent;
        static constexpr bool has_denorm_loss = false;

        static constexpr float_round_style round_style = round_toward_zero;

        static constexpr bool is_iec559 = false;
        static constexpr bool is_bounded = true;
        static constexpr bool is_modulo = true;

        static constexpr int digits = __digits(char8_t);
        static constexpr int digits10 = __digits10(char8_t);
        static constexpr int max_digits10 = 0;

        static constexpr int radix = 2;

        static constexpr int min_exponent = 0;
        static constexpr int min_exponent10 = 0;
        static constexpr int max_exponent = 0;
        static constexpr int max_exponent10 = 0;

        static constexpr bool traps = true;
        static constexpr bool tinyness_before = false;

        static constexpr char8_t min() noexcept { return 0; }
        static constexpr char8_t lowest() noexcept { return 0; }
        static constexpr char8_t max() noexcept { return UCHAR_MAX; }

        static constexpr char8_t epsilon() noexcept { return 0; }
        static constexpr char8_t round_error() noexcept { return 0; }

        static constexpr char8_t infinity() noexcept { return 0; }
        static constexpr char8_t quiet_NaN() noexcept { return 0; }
        static constexpr char8_t signaling_NaN() noexcept { return 0; }
        static constexpr char8_t denorm_min() noexcept { return 0; }
    };

    template<>
    class numeric_limits<char16_t>
    {
        public:
        static constexpr bool is_specialized = true;
        static constexpr bool is_signed = false;
        static constexpr bool is_integer = true;
        static constexpr bool is_exact = true;

        static constexpr bool has_infinity = false;
        static constexpr bool has_quiet_NaN = false;
        static constexpr bool has_signaling_NaN = false;
        static constexpr float_denorm_style has_denorm = denorm_absent;
        static constexpr bool has_denorm_loss = false;

        static constexpr float_round_style round_style = round_toward_zero;

        static constexpr bool is_iec559 = false;
        static constexpr bool is_bounded = true;
        static constexpr bool is_modulo = true;

        static constexpr int digits = __digits(char16_t);
        static constexpr int digits10 = __digits10(char16_t);
        static constexpr int max_digits10 = 0;

        static constexpr int radix = 2;

        static constexpr int min_exponent = 0;
        static constexpr int min_exponent10 = 0;
        static constexpr int max_exponent = 0;
        static constexpr int max_exponent10 = 0;

        static constexpr bool traps = true;
        static constexpr bool tinyness_before = false;

        static constexpr char16_t min() noexcept { return 0; }
        static constexpr char16_t lowest() noexcept { return 0; }
        static constexpr char16_t max() noexcept { return UINT_LEAST16_MAX; }

        static constexpr char16_t epsilon() noexcept { return 0; }
        static constexpr char16_t round_error() noexcept { return 0; }

        static constexpr char16_t infinity() noexcept { return 0; }
        static constexpr char16_t quiet_NaN() noexcept { return 0; }
        static constexpr char16_t signaling_NaN() noexcept { return 0; }
        static constexpr char16_t denorm_min() noexcept { return 0; }
    };

    template<>
    class numeric_limits<char32_t>
    {
        public:
        static constexpr bool is_specialized = true;
        static constexpr bool is_signed = false;
        static constexpr bool is_integer = true;
        static constexpr bool is_exact = true;

        static constexpr bool has_infinity = false;
        static constexpr bool has_quiet_NaN = false;
        static constexpr bool has_signaling_NaN = false;
        static constexpr float_denorm_style has_denorm = denorm_absent;
        static constexpr bool has_denorm_loss = false;

        static constexpr float_round_style round_style = round_toward_zero;

        static constexpr bool is_iec559 = false;
        static constexpr bool is_bounded = true;
        static constexpr bool is_modulo = true;

        static constexpr int digits = __digits(char32_t);
        static constexpr int digits10 = __digits10(char32_t);
        static constexpr int max_digits10 = 0;

        static constexpr int radix = 2;

        static constexpr int min_exponent = 0;
        static constexpr int min_exponent10 = 0;
        static constexpr int max_exponent = 0;
        static constexpr int max_exponent10 = 0;

        static constexpr bool traps = true;
        static constexpr bool tinyness_before = false;

        static constexpr char32_t min() noexcept { return 0; }
        static constexpr char32_t lowest() noexcept { return 0; }
        static constexpr char32_t max() noexcept { return UINT_LEAST32_MAX; }

        static constexpr char32_t epsilon() noexcept { return 0; }
        static constexpr char32_t round_error() noexcept { return 0; }

        static constexpr char32_t infinity() noexcept { return 0; }
        static constexpr char32_t quiet_NaN() noexcept { return 0; }
        static constexpr char32_t signaling_NaN() noexcept { return 0; }
        static constexpr char32_t denorm_min() noexcept { return 0; }
    };

    template<>
    class numeric_limits<short>
    {
        public:
        static constexpr bool is_specialized = true;
        static constexpr bool is_signed = true;
        static constexpr bool is_integer = true;
        static constexpr bool is_exact = true;

        static constexpr bool has_infinity = false;
        static constexpr bool has_quiet_NaN = false;
        static constexpr bool has_signaling_NaN = false;
        static constexpr float_denorm_style has_denorm = denorm_absent;
        static constexpr bool has_denorm_loss = false;

        static constexpr float_round_style round_style = round_toward_zero;

        static constexpr bool is_iec559 = false;
        static constexpr bool is_bounded = true;
        static constexpr bool is_modulo = false;

        static constexpr int digits = __digits(short);
        static constexpr int digits10 = __digits10(short);
        static constexpr int max_digits10 = 0;

        static constexpr int radix = 2;

        static constexpr int min_exponent = 0;
        static constexpr int min_exponent10 = 0;
        static constexpr int max_exponent = 0;
        static constexpr int max_exponent10 = 0;

        static constexpr bool traps = true;
        static constexpr bool tinyness_before = false;

        static constexpr short min() noexcept { return SHRT_MIN; }
        static constexpr short lowest() noexcept { return SHRT_MIN; }
        static constexpr short max() noexcept { return SHRT_MAX; }

        static constexpr short epsilon() noexcept { return 0; }
        static constexpr short round_error() noexcept { return 0; }

        static constexpr short infinity() noexcept { return 0; }
        static constexpr short quiet_NaN() noexcept { return 0; }
        static constexpr short signaling_NaN() noexcept { return 0; }
        static constexpr short denorm_min() noexcept { return 0; }
    };

    template<>
    class numeric_limits<unsigned short>
    {
        public:
        static constexpr bool is_specialized = true;
        static constexpr bool is_signed = false;
        static constexpr bool is_integer = true;
        static constexpr bool is_exact = true;

        static constexpr bool has_infinity = false;
        static constexpr bool has_quiet_NaN = false;
        static constexpr bool has_signaling_NaN = false;
        static constexpr float_denorm_style has_denorm = denorm_absent;
        static constexpr bool has_denorm_loss = false;

        static constexpr float_round_style round_style = round_toward_zero;

        static constexpr bool is_iec559 = false;
        static constexpr bool is_bounded = true;
        static constexpr bool is_modulo = true;

        static constexpr int digits = __digits(unsigned short);
        static constexpr int digits10 = __digits10(unsigned short);
        static constexpr int max_digits10 = 0;

        static constexpr int radix = 2;

        static constexpr int min_exponent = 0;
        static constexpr int min_exponent10 = 0;
        static constexpr int max_exponent = 0;
        static constexpr int max_exponent10 = 0;

        static constexpr bool traps = true;
        static constexpr bool tinyness_before = false;

        static constexpr unsigned short min() noexcept { return 0; }
        static constexpr unsigned short lowest() noexcept { return 0; }
        static constexpr unsigned short max() noexcept { return USHRT_MAX; }

        static constexpr unsigned short epsilon() noexcept { return 0; }
        static constexpr unsigned short round_error() noexcept { return 0; }

        static constexpr unsigned short infinity() noexcept { return 0; }
        static constexpr unsigned short quiet_NaN() noexcept { return 0; }
        static constexpr unsigned short signaling_NaN() noexcept { return 0; }
        static constexpr unsigned short denorm_min() noexcept { return 0; }
    };

    template<>
    class numeric_limits<int>
    {
        public:
        static constexpr bool is_specialized = true;
        static constexpr bool is_signed = true;
        static constexpr bool is_integer = true;
        static constexpr bool is_exact = true;

        static constexpr bool has_infinity = false;
        static constexpr bool has_quiet_NaN = false;
        static constexpr bool has_signaling_NaN = false;
        static constexpr float_denorm_style has_denorm = denorm_absent;
        static constexpr bool has_denorm_loss = false;

        static constexpr float_round_style round_style = round_toward_zero;

        static constexpr bool is_iec559 = false;
        static constexpr bool is_bounded = true;
        static constexpr bool is_modulo = false;

        static constexpr int digits = __digits(int);
        static constexpr int digits10 = __digits10(int);
        static constexpr int max_digits10 = 0;

        static constexpr int radix = 2;

        static constexpr int min_exponent = 0;
        static constexpr int min_exponent10 = 0;
        static constexpr int max_exponent = 0;
        static constexpr int max_exponent10 = 0;

        static constexpr bool traps = true;
        static constexpr bool tinyness_before = false;

        static constexpr int min() noexcept { return INT_MIN; }
        static constexpr int lowest() noexcept { return INT_MIN; }
        static constexpr int max() noexcept { return INT_MAX; }

        static constexpr int epsilon() noexcept { return 0; }
        static constexpr int round_error() noexcept { return 0; }

        static constexpr int infinity() noexcept { return 0; }
        static constexpr int quiet_NaN() noexcept { return 0; }
        static constexpr int signaling_NaN() noexcept { return 0; }
        static constexpr int denorm_min() noexcept { return 0; }
    };

    template<>
    class numeric_limits<unsigned int>
    {
        public:
        static constexpr bool is_specialized = true;
        static constexpr bool is_signed = false;
        static constexpr bool is_integer = true;
        static constexpr bool is_exact = true;

        static constexpr bool has_infinity = false;
        static constexpr bool has_quiet_NaN = false;
        static constexpr bool has_signaling_NaN = false;
        static constexpr float_denorm_style has_denorm = denorm_absent;
        static constexpr bool has_denorm_loss = false;

        static constexpr float_round_style round_style = round_toward_zero;

        static constexpr bool is_iec559 = false;
        static constexpr bool is_bounded = true;
        static constexpr bool is_modulo = true;

        static constexpr int digits = __digits(unsigned int);
        static constexpr int digits10 = __digits10(unsigned int);
        static constexpr int max_digits10 = 0;

        static constexpr int radix = 2;

        static constexpr int min_exponent = 0;
        static constexpr int min_exponent10 = 0;
        static constexpr int max_exponent = 0;
        static constexpr int max_exponent10 = 0;

        static constexpr bool traps = true;
        static constexpr bool tinyness_before = false;

        static constexpr unsigned int min() noexcept { return 0; }
        static constexpr unsigned int lowest() noexcept { return 0; }
        static constexpr unsigned int max() noexcept { return UINT_MAX; }

        static constexpr unsigned int epsilon() noexcept { return 0; }
        static constexpr unsigned int round_error() noexcept { return 0; }

        static constexpr unsigned int infinity() noexcept { return 0; }
        static constexpr unsigned int quiet_NaN() noexcept { return 0; }
        static constexpr unsigned int signaling_NaN() noexcept { return 0; }
        static constexpr unsigned int denorm_min() noexcept { return 0; }
    };

    template<>
    class numeric_limits<long>
    {
        public:
        static constexpr bool is_specialized = true;
        static constexpr bool is_signed = true;
        static constexpr bool is_integer = true;
        static constexpr bool is_exact = true;

        static constexpr bool has_infinity = false;
        static constexpr bool has_quiet_NaN = false;
        static constexpr bool has_signaling_NaN = false;
        static constexpr float_denorm_style has_denorm = denorm_absent;
        static constexpr bool has_denorm_loss = false;

        static constexpr float_round_style round_style = round_toward_zero;

        static constexpr bool is_iec559 = false;
        static constexpr bool is_bounded = true;
        static constexpr bool is_modulo = false;

        static constexpr int digits = __digits(long);
        static constexpr int digits10 = __digits10(long);
        static constexpr int max_digits10 = 0;

        static constexpr int radix = 2;

        static constexpr int min_exponent = 0;
        static constexpr int min_exponent10 = 0;
        static constexpr int max_exponent = 0;
        static constexpr int max_exponent10 = 0;

        static constexpr bool traps = true;
        static constexpr bool tinyness_before = false;

        static constexpr long min() noexcept { return LONG_MIN; }
        static constexpr long lowest() noexcept { return LONG_MIN; }
        static constexpr long max() noexcept { return LONG_MAX; }

        static constexpr long epsilon() noexcept { return 0; }
        static constexpr long round_error() noexcept { return 0; }

        static constexpr long infinity() noexcept { return 0; }
        static constexpr long quiet_NaN() noexcept { return 0; }
        static constexpr long signaling_NaN() noexcept { return 0; }
        static constexpr long denorm_min() noexcept { return 0; }
    };

    template<>
    class numeric_limits<unsigned long>
    {
        public:
        static constexpr bool is_specialized = true;
        static constexpr bool is_signed = false;
        static constexpr bool is_integer = true;
        static constexpr bool is_exact = true;

        static constexpr bool has_infinity = false;
        static constexpr bool has_quiet_NaN = false;
        static constexpr bool has_signaling_NaN = false;
        static constexpr float_denorm_style has_denorm = denorm_absent;
        static constexpr bool has_denorm_loss = false;

        static constexpr float_round_style round_style = round_toward_zero;

        static constexpr bool is_iec559 = false;
        static constexpr bool is_bounded = true;
        static constexpr bool is_modulo = true;

        static constexpr int digits = __digits(unsigned long);
        static constexpr int digits10 = __digits10(unsigned long);
        static constexpr int max_digits10 = 0;

        static constexpr int radix = 2;

        static constexpr int min_exponent = 0;
        static constexpr int min_exponent10 = 0;
        static constexpr int max_exponent = 0;
        static constexpr int max_exponent10 = 0;

        static constexpr bool traps = true;
        static constexpr bool tinyness_before = false;

        static constexpr unsigned long min() noexcept { return 0; }
        static constexpr unsigned long lowest() noexcept { return 0; }
        static constexpr unsigned long max() noexcept { return ULONG_MAX; }

        static constexpr unsigned long epsilon() noexcept { return 0; }
        static constexpr unsigned long round_error() noexcept { return 0; }

        static constexpr unsigned long infinity() noexcept { return 0; }
        static constexpr unsigned long quiet_NaN() noexcept { return 0; }
        static constexpr unsigned long signaling_NaN() noexcept { return 0; }
        static constexpr unsigned long denorm_min() noexcept { return 0; }
    };

    template<>
    class numeric_limits<long long>
    {
        public:
        static constexpr bool is_specialized = true;
        static constexpr bool is_signed = true;
        static constexpr bool is_integer = true;
        static constexpr bool is_exact = true;

        static constexpr bool has_infinity = false;
        static constexpr bool has_quiet_NaN = false;
        static constexpr bool has_signaling_NaN = false;
        static constexpr float_denorm_style has_denorm = denorm_absent;
        static constexpr bool has_denorm_loss = false;

        static constexpr float_round_style round_style = round_toward_zero;

        static constexpr bool is_iec559 = false;
        static constexpr bool is_bounded = true;
        static constexpr bool is_modulo = false;

        static constexpr int digits = __digits(long long);
        static constexpr int digits10 = __digits10(long long);
        static constexpr int max_digits10 = 0;

        static constexpr int radix = 2;

        static constexpr int min_exponent = 0;
        static constexpr int min_exponent10 = 0;
        static constexpr int max_exponent = 0;
        static constexpr int max_exponent10 = 0;

        static constexpr bool traps = true;
        static constexpr bool tinyness_before = false;

        static constexpr long long min() noexcept { return LLONG_MIN; }
        static constexpr long long lowest() noexcept { return LLONG_MIN; }
        static constexpr long long max() noexcept { return LLONG_MAX; }

        static constexpr long long epsilon() noexcept { return 0; }
        static constexpr long long round_error() noexcept { return 0; }

        static constexpr long long infinity() noexcept { return 0; }
        static constexpr long long quiet_NaN() noexcept { return 0; }
        static constexpr long long signaling_NaN() noexcept { return 0; }
        static constexpr long long denorm_min() noexcept { return 0; }
    };

    template<>
    class numeric_limits<unsigned long long>
    {
        public:
        static constexpr bool is_specialized = true;
        static constexpr bool is_signed = false;
        static constexpr bool is_integer = true;
        static constexpr bool is_exact = true;

        static constexpr bool has_infinity = false;
        static constexpr bool has_quiet_NaN = false;
        static constexpr bool has_signaling_NaN = false;
        static constexpr float_denorm_style has_denorm = denorm_absent;
        static constexpr bool has_denorm_loss = false;

        static constexpr float_round_style round_style = round_toward_zero;

        static constexpr bool is_iec559 = false;
        static constexpr bool is_bounded = true;
        static constexpr bool is_modulo = true;

        static constexpr int digits = __digits(unsigned long long);
        static constexpr int digits10 = __digits10(unsigned long long);
        static constexpr int max_digits10 = 0;

        static constexpr int radix = 2;

        static constexpr int min_exponent = 0;
        static constexpr int min_exponent10 = 0;
        static constexpr int max_exponent = 0;
        static constexpr int max_exponent10 = 0;

        static constexpr bool traps = true;
        static constexpr bool tinyness_before = false;

        static constexpr unsigned long long min() noexcept { return 0; }
        static constexpr unsigned long long lowest() noexcept { return 0; }
        static constexpr unsigned long long max() noexcept { return ULLONG_MAX; }

        static constexpr unsigned long long epsilon() noexcept { return 0; }
        static constexpr unsigned long long round_error() noexcept { return 0; }

        static constexpr unsigned long long infinity() noexcept { return 0; }
        static constexpr unsigned long long quiet_NaN() noexcept { return 0; }
        static constexpr unsigned long long signaling_NaN() noexcept { return 0; }
        static constexpr unsigned long long denorm_min() noexcept { return 0; }
    };
} // namespace std