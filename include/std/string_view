// Copyright (C) 2022  ilobilo

#pragma once

#include <char_traits>
#include <functional>
#include <algorithm>
#include <utility>

namespace std
{
    template<typename Char, typename Traits = char_traits<Char>>
    class basic_string_view
    {
        private:
        const Char *_pointer;
        size_t _length;

        public:
        using traits_type = Traits;
        using value_type = Char;
        using pointer = Char*;
        using const_pointer = const Char*;
        using reference = Char&;
        using const_reference = const Char&;
        using const_iterator = const_pointer;
        using iterator = const_iterator;
        using size_type = size_t;
        using difference_type = ptrdiff_t;

        static constexpr size_type npos = size_type(-1);

        constexpr basic_string_view() : _pointer(nullptr), _length(0) { }
        constexpr basic_string_view(const basic_string_view &other) = default;

        constexpr basic_string_view(const Char *s, size_type length) : _pointer(s), _length(length) { }
        constexpr basic_string_view(const Char *s) : _pointer(s), _length(Traits::length(s)) { }

        constexpr basic_string_view(nullptr_t) = delete;

        constexpr basic_string_view &operator=(const basic_string_view &view) = default;

        constexpr const_iterator begin() const
        {
            return this->_pointer;
        }

        constexpr const_iterator cbegin() const
        {
            return this->_pointer;
        }

        constexpr const_iterator end() const
        {
            return this->_pointer + this->_length;
        }

        constexpr const_iterator cend() const
        {
            return this->_pointer + this->_length;
        }

        constexpr const_reference operator[](size_type index) const
        {
            return this->_pointer[index];
        }

        constexpr const_reference at(size_type index) const
        {
            if (index > this->_length)
                index = this->_length - 1;
            return this->operator[](index);
        }

        constexpr const_reference front() const
        {
            return this->_pointer[0];
        }

        constexpr const_reference back() const
        {
            return this->_pointer[this->_length - 1];
        }

        constexpr const_pointer data() const
        {
            return this->_pointer;
        }

        constexpr size_type size() const
        {
            return this->_length;
        }

        constexpr size_type length() const
        {
            return this->_length;
        }

        constexpr size_type max_size() const
        {
            return size_type(-1) / sizeof(value_type);
        }

        [[nodiscard]] constexpr bool empty() const
        {
            return this->_length == 0;
        }

        constexpr void remove_prefix(size_type n)
        {
            this->_pointer += n;
            this->_length -= n;
        }

        constexpr void remove_suffix(size_type n)
        {
            this->_length -= n;
        }

        constexpr void swap(basic_string_view &v)
        {
            using std::swap;
            swap(this->_pointer, v._pointer);
            swap(this->_length, v._length);
        }

        constexpr size_type copy(Char *dest, size_type count, size_type pos = 0) const
        {
            if (pos > this->length) return 0;
            return Traits::copy(dest, this->_pointer + pos, count);
        }

        constexpr basic_string_view substr(size_type pos = 0, size_type count = npos) const
        {
            if (pos > this->_length)
                pos = this->_length;
            return basic_string_view(_pointer + pos, min(count, this->_length - pos));
        }

        constexpr int compare(basic_string_view v) const
        {
            auto rlen = min(this->_length, v._length);
            auto result = Traits::compare(this->_pointer, v._pointer, rlen);

            if (result == 0)
                return this->_length < v._length ? -1 : (this->_length > v._length ? 1 : 0);
            else
                return result;
        }

        constexpr int compare(size_type pos1, size_type count1, basic_string_view v) const
        {
            return this->substr(pos1, count1).compare(v);
        }

        constexpr int compare(size_type pos1, size_type count1, basic_string_view v, size_type pos2, size_type count2) const
        {
            return this->substr(pos1, count1).compare(v.substr(pos2, count2));
        }

        constexpr int compare(const Char *s) const
        {
            return this->compare(basic_string_view(s));
        }

        constexpr int compare(size_type pos1, size_type count1, const Char *s) const
        {
            return this->substr(pos1, count1).compare(basic_string_view(s));
        }

        constexpr int compare(size_type pos1, size_type count1, const Char *s, size_type count2) const
        {
            return this->substr(pos1, count1).compare(basic_string_view(s, count2));
        }

        constexpr bool starts_with(basic_string_view sv) const
        {
            return this->substr(0, sv.size()) == sv;
        }

        constexpr bool starts_with(Char c) const
        {
            return !this->empty() && Traits::eq(this->front(), c);
        }

        constexpr bool starts_with(const Char *s) const
        {
            return this->starts_with(basic_string_view(s));
        }

        constexpr bool ends_with(basic_string_view sv) const
        {
            return this->size() >= sv.size() && this->compare(this->size() - sv.size(), npos, sv) == 0;
        }

        constexpr bool ends_with(Char c) const
        {
            return !this->empty() && Traits::eq(this->back(), c);
        }

        constexpr bool ends_with(const Char *s) const
        {
            return this->ends_with(basic_string_view(s));
        }

        constexpr bool contains(basic_string_view sv) const
        {
            return this->find(sv) != npos;
        }

        constexpr bool contains(Char c) const
        {
            return this->find(c) != npos;
        }

        constexpr bool contains(const Char *s) const
        {
            return this->find(s) != npos;
        }

        constexpr size_type find(basic_string_view v, size_type pos = 0) const
        {
            if (v._length == 0)
                return pos <= this->_length ? pos : npos;

            if (v._length <= this->_length)
            {
                for (size_type i = pos; i <= this->_length - v._length; i++)
                {
                    if (Traits::eq(this->_pointer[i], v._pointer[0]))
                        if (Traits::compare(this->_pointer + i + 1, v._pointer + 1, v._length - 1) == 0)
                            return i;
                }
            }
            return npos;
        }

        constexpr size_type find(Char c, size_type pos = 0) const
        {
            return this->find(basic_string_view(addressof(c), 1), pos);
        }

        constexpr size_type find(const Char *s, size_type pos, size_type count) const
        {
            return this->find(basic_string_view(s, count), pos);
        }

        constexpr size_type find(const Char *s, size_type pos = 0) const
        {
            return this->find(basic_string_view(s), pos);
        }

        constexpr size_type rfind(basic_string_view v, size_type pos = npos) const
        {
            if (v._length <= this->_length)
            {
                size_type i = min(size_type(this->_length - v._length), pos);
                do
                {
                    if (Traits::compare(this->_pointer + i, v._pointer, v._length) == 0)
                        return i;
                }
                while (i-- > 0);
            }
            return npos;
        }

        constexpr size_type rfind(Char c, size_type pos = npos) const
        {
            return this->rfind(basic_string_view(addressof(c), 1), pos);
        }

        constexpr size_type rfind(const Char *s, size_type pos, size_type count) const
        {
            return this->rfind(basic_string_view(s, count), pos);
        }

        constexpr size_type rfind(const Char *s, size_type pos = npos) const
        {
            return this->rfind(basic_string_view(s), pos);
        }

        constexpr size_type find_first_of(basic_string_view v, size_type pos = 0) const
        {
            if (v._length == 0)
                return npos;

            for (size_type i = pos; i < this->_length; i++)
                if (Traits::find(v._pointer, v._length, this->_pointer[i]) != nullptr)
                    return i;
            return npos;
        }

        constexpr size_type find_first_of(Char c, size_type pos = 0) const
        {
            return this->find_first_of(basic_string_view(addressof(c), 1), pos);
        }

        constexpr size_type find_first_of(const Char *s, size_type pos, size_type count) const
        {
            return this->find_first_of(basic_string_view(s, count), pos);
        }

        constexpr size_type find_first_of(const Char *s, size_type pos = 0) const
        {
            return this->find_first_of(basic_string_view(s), pos);
        }

        constexpr size_type find_last_of(basic_string_view v, size_type pos = npos) const
        {
            if (this->_length == 0 || v._length == 0)
                return npos;

            size_type i = min(this->_length - 1, pos);
            do
            {
                if (Traits::find(v._pointer, v._length, this->_pointer[i]) != nullptr)
                    return i;
            }
            while (i-- > 0);

            return npos;
        }

        constexpr size_type find_last_of(Char c, size_type pos = npos) const
        {
            return this->find_last_of(basic_string_view(addressof(c), 1), pos);
        }

        constexpr size_type find_last_of(const Char *s, size_type pos, size_type count) const
        {
            return this->find_last_of(basic_string_view(s, count), pos);
        }

        constexpr size_type find_last_of(const Char *s, size_type pos = npos) const
        {
            return this->find_last_of(basic_string_view(s), pos);
        }

        constexpr size_type find_first_not_of(basic_string_view v, size_type pos = 0) const
        {
            for (size_type i = pos; i < this->_length; i++)
                if (Traits::find(v._pointer, v._length, this->_pointer[i]) == nullptr)
                    return i;
            return npos;
        }

        constexpr size_type find_first_not_of(Char c, size_type pos = 0) const
        {
            return this->find_first_not_of(basic_string_view(addressof(c), 1), pos);
        }

        constexpr size_type find_first_not_of(const Char *s, size_type pos, size_type count) const
        {
            return this->find_first_not_of(basic_string_view(s, count), pos);
        }

        constexpr size_type find_first_not_of(const Char *s, size_type pos = 0) const
        {
            return this->find_first_not_of(basic_string_view(s), pos);
        }

        constexpr size_type find_last_not_of(basic_string_view v, size_type pos = npos) const
        {
            if (this->_length == 0)
                return npos;

            size_type i = min(this->_length - 1, pos);
            do
            {
                if (Traits::find(v._pointer, v._length, this->_pointer[i]) == nullptr)
                    return i;
            }
            while (i--);

            return npos;
        }

        constexpr size_type find_last_not_of(Char c, size_type pos = npos) const
        {
            return this->find_last_not_of(basic_string_view(addressof(c), 1), pos);
        }

        constexpr size_type find_last_not_of(const Char *s, size_type pos, size_type count) const
        {
            return this->find_last_not_of(basic_string_view(s, count), pos);
        }

        constexpr size_type find_last_not_of(const Char *s, size_type pos = npos) const
        {
            return this->find_last_not_of(basic_string_view(s), pos);
        }

        friend constexpr bool operator==(basic_string_view lhs, basic_string_view rhs)
        {
            return lhs.compare(rhs) == 0;
        }

        friend constexpr auto operator<=>(basic_string_view lhs, basic_string_view rhs)
        {
            return lhs.compare(rhs) <=> 0;
        }
    };

    using string_view = basic_string_view<char>;
    using wstring_view = basic_string_view<wchar_t>;

    template<typename Char, typename Traits>
    struct hash<basic_string_view<Char, Traits>>
    {
        size_t operator()(const basic_string_view<Char, Traits> &str) const
        {
            return detail::hash_impl::hash(str.data(), str.length());
        }
    };

    inline namespace literals
    {
        inline namespace string_view_literals
        {
            inline string_view operator""sv(const char *str, size_t len)
            {
                return string_view(str, len);
            }
        } // inline namespace string_view_literals
    } // inline namespace literals
} // namespace std

using namespace std::literals::string_view_literals;