// Copyright (C) 2022-2023  ilobilo

#pragma once

#include_next <string_view>
using namespace std::literals::string_view_literals;

/*
// Copyright (C) 2022-2023  ilobilo

#pragma once

#pragma GCC system_header

#include <char_traits>
#include <functional>
#include <algorithm>
#include <utility>

#if defined(__clang__) && __clang_major__ <= 15
#   define SV_RANGES 0
#else
#   define SV_RANGES 1
#endif

#if SV_RANGES
#   include <ranges>
#endif

namespace std
{
    template<typename Char, typename Traits = char_traits<Char>>
    class basic_string_view
    {
        private:
        const Char *_pointer;
        size_t _length;

        public:
        using traits_type = Traits;
        using value_type = Char;
        using pointer = Char*;
        using const_pointer = const Char*;
        using reference = Char&;
        using const_reference = const Char&;
        using const_iterator = const_pointer;
        using iterator = const_iterator;
        using const_reverse_iterator = reverse_iterator<const_pointer>;
        using reverse_iterator = const_reverse_iterator;
        using size_type = size_t;
        using difference_type = ptrdiff_t;

        static constexpr size_type npos = size_type(-1);

        constexpr basic_string_view() noexcept : _pointer(nullptr), _length(0) { }
        constexpr basic_string_view(const basic_string_view &other) noexcept = default;

        constexpr basic_string_view(const Char *s, size_type length) : _pointer(s), _length(length) { }
        constexpr basic_string_view(const Char *s) : _pointer(s), _length(Traits::length(s)) { }

        template<contiguous_iterator It, sized_sentinel_for<It> End>
            requires (same_as<iter_value_t<It>, Char> && !convertible_to<End, size_t>)
        constexpr basic_string_view(It first, End last) : _pointer(to_address(first)), _length(last - first) { }

#if SV_RANGES
        template<ranges::contiguous_range R>
            requires (
                ranges::sized_range<R> &&
                !same_as<remove_cvref_t<R>, basic_string_view> &&
                !same_as<ranges::range_value_t<R>, Char> &&
                !convertible_to<R, const Char *> &&
                (!requires(remove_cvref_t<R> &d) {
                    d.operator ::std::basic_string_view<Char, Traits>();
                }) &&
                (!requires {
                    typename remove_reference_t<R>::traits_type;
                } ||
                same_as<typename remove_reference_t<R>::traits_type, Traits>)
        )
        explicit constexpr basic_string_view(R &&r) : _pointer(ranges::data(r)), _length(ranges::size(r)) { }
#endif

        constexpr basic_string_view(nullptr_t) = delete;

        constexpr basic_string_view &operator=(const basic_string_view &view) noexcept = default;

        constexpr const_iterator begin() const noexcept
        {
            return this->_pointer;
        }

        constexpr const_iterator cbegin() const noexcept
        {
            return this->_pointer;
        }

        constexpr const_iterator end() const noexcept
        {
            return this->_pointer + this->_length;
        }

        constexpr const_iterator cend() const noexcept
        {
            return this->_pointer + this->_length;
        }

        constexpr const_reverse_iterator rbegin() const noexcept
        {
            return const_reverse_iterator(this->end());
        }

        constexpr const_reverse_iterator crbegin() const noexcept
        {
            return const_reverse_iterator(this->cend());
        }

        constexpr const_reverse_iterator rend() const noexcept
        {
            return const_reverse_iterator(this->begin());
        }

        constexpr const_reverse_iterator crend() const noexcept
        {
            return const_reverse_iterator(this->cbegin());
        }

        constexpr const_reference operator[](size_type index) const
        {
            return this->_pointer[index];
        }

        constexpr const_reference at(size_type index) const
        {
            assert(index < this->_length, "string_view::at: index out of range");
            return this->operator[](index);
        }

        constexpr const_reference front() const
        {
            return this->_pointer[0];
        }

        constexpr const_reference back() const
        {
            return this->_pointer[this->_length - 1];
        }

        constexpr const_pointer data() const noexcept
        {
            return this->_pointer;
        }

        constexpr size_type size() const noexcept
        {
            return this->_length;
        }

        constexpr size_type length() const noexcept
        {
            return this->_length;
        }

        constexpr size_type max_size() const noexcept
        {
            return size_type(-1) / sizeof(value_type);
        }

        [[nodiscard]] constexpr bool empty() const noexcept
        {
            return this->_length == 0;
        }

        constexpr void remove_prefix(size_type n)
        {
            this->_pointer += n;
            this->_length -= n;
        }

        constexpr void remove_suffix(size_type n)
        {
            this->_length -= n;
        }

        constexpr void swap(basic_string_view &v) noexcept
        {
            using std::swap;
            swap(this->_pointer, v._pointer);
            swap(this->_length, v._length);
        }

        constexpr size_type copy(Char *dest, size_type count, size_type pos = 0) const
        {
            assert(pos <= this->_length, "string_view::copy: pos out of range");
            auto len = min(count, this->_length - pos);
            Traits::copy(dest, this->_pointer + pos, len);
            return len;
        }

        constexpr basic_string_view substr(size_type pos = 0, size_type count = npos) const
        {
            assert(pos <= this->_length, "string_view::substr: pos out of range");
            return basic_string_view(_pointer + pos, min(count, this->_length - pos));
        }

        constexpr int compare(basic_string_view v) const noexcept
        {
            auto result = Traits::compare(this->_pointer, v._pointer, min(this->_length, v._length));

            if (result == 0)
                return this->_length < v._length ? -1 : (this->_length > v._length ? 1 : 0);
            else
                return result;
        }

        constexpr int compare(size_type pos1, size_type count1, basic_string_view v) const
        {
            return this->substr(pos1, count1).compare(v);
        }

        constexpr int compare(size_type pos1, size_type count1, basic_string_view v, size_type pos2, size_type count2) const
        {
            return this->substr(pos1, count1).compare(v.substr(pos2, count2));
        }

        constexpr int compare(const Char *s) const
        {
            return this->compare(basic_string_view(s));
        }

        constexpr int compare(size_type pos1, size_type count1, const Char *s) const
        {
            return this->substr(pos1, count1).compare(basic_string_view(s));
        }

        constexpr int compare(size_type pos1, size_type count1, const Char *s, size_type count2) const
        {
            return this->substr(pos1, count1).compare(basic_string_view(s, count2));
        }

        constexpr bool starts_with(basic_string_view sv) const noexcept
        {
            return this->substr(0, sv.size()) == sv;
        }

        constexpr bool starts_with(Char c) const noexcept
        {
            return !this->empty() && Traits::eq(this->front(), c);
        }

        constexpr bool starts_with(const Char *s) const noexcept
        {
            return this->starts_with(basic_string_view(s));
        }

        constexpr bool ends_with(basic_string_view sv) const noexcept
        {
            return this->size() >= sv.size() && this->compare(this->size() - sv.size(), npos, sv) == 0;
        }

        constexpr bool ends_with(Char c) const noexcept
        {
            return !this->empty() && Traits::eq(this->back(), c);
        }

        constexpr bool ends_with(const Char *s) const noexcept
        {
            return this->ends_with(basic_string_view(s));
        }

        constexpr bool contains(basic_string_view sv) const noexcept
        {
            return this->find(sv) != npos;
        }

        constexpr bool contains(Char c) const noexcept
        {
            return this->find(c) != npos;
        }

        constexpr bool contains(const Char *s) const
        {
            return this->find(s) != npos;
        }

        constexpr size_type find(basic_string_view v, size_type pos = 0) const noexcept
        {
            if (v._length == 0)
                return pos <= this->_length ? pos : npos;

            if (v._length <= this->_length)
            {
                for (size_type i = pos; i <= this->_length - v._length; i++)
                {
                    if (Traits::eq(this->_pointer[i], v._pointer[0]))
                        if (Traits::compare(this->_pointer + i + 1, v._pointer + 1, v._length - 1) == 0)
                            return i;
                }
            }
            return npos;
        }

        constexpr size_type find(Char c, size_type pos = 0) const noexcept
        {
            return this->find(basic_string_view(addressof(c), 1), pos);
        }

        constexpr size_type find(const Char *s, size_type pos, size_type count) const
        {
            return this->find(basic_string_view(s, count), pos);
        }

        constexpr size_type find(const Char *s, size_type pos = 0) const
        {
            return this->find(basic_string_view(s), pos);
        }

        constexpr size_type rfind(basic_string_view v, size_type pos = npos) const noexcept
        {
            if (v._length <= this->_length)
            {
                size_type i = min(size_type(this->_length - v._length), pos);
                do
                {
                    if (Traits::compare(this->_pointer + i, v._pointer, v._length) == 0)
                        return i;
                }
                while (i-- > 0);
            }
            return npos;
        }

        constexpr size_type rfind(Char c, size_type pos = npos) const noexcept
        {
            return this->rfind(basic_string_view(addressof(c), 1), pos);
        }

        constexpr size_type rfind(const Char *s, size_type pos, size_type count) const
        {
            return this->rfind(basic_string_view(s, count), pos);
        }

        constexpr size_type rfind(const Char *s, size_type pos = npos) const
        {
            return this->rfind(basic_string_view(s), pos);
        }

        constexpr size_type find_first_of(basic_string_view v, size_type pos = 0) const noexcept
        {
            if (v._length == 0)
                return npos;

            for (size_type i = pos; i < this->_length; i++)
                if (Traits::find(v._pointer, v._length, this->_pointer[i]) != nullptr)
                    return i;
            return npos;
        }

        constexpr size_type find_first_of(Char c, size_type pos = 0) const noexcept
        {
            return this->find_first_of(basic_string_view(addressof(c), 1), pos);
        }

        constexpr size_type find_first_of(const Char *s, size_type pos, size_type count) const
        {
            return this->find_first_of(basic_string_view(s, count), pos);
        }

        constexpr size_type find_first_of(const Char *s, size_type pos = 0) const
        {
            return this->find_first_of(basic_string_view(s), pos);
        }

        constexpr size_type find_last_of(basic_string_view v, size_type pos = npos) const noexcept
        {
            if (this->_length == 0 || v._length == 0)
                return npos;

            size_type i = min(this->_length - 1, pos);
            do
            {
                if (Traits::find(v._pointer, v._length, this->_pointer[i]) != nullptr)
                    return i;
            }
            while (i-- > 0);

            return npos;
        }

        constexpr size_type find_last_of(Char c, size_type pos = npos) const noexcept
        {
            return this->find_last_of(basic_string_view(addressof(c), 1), pos);
        }

        constexpr size_type find_last_of(const Char *s, size_type pos, size_type count) const
        {
            return this->find_last_of(basic_string_view(s, count), pos);
        }

        constexpr size_type find_last_of(const Char *s, size_type pos = npos) const
        {
            return this->find_last_of(basic_string_view(s), pos);
        }

        constexpr size_type find_first_not_of(basic_string_view v, size_type pos = 0) const noexcept
        {
            for (size_type i = pos; i < this->_length; i++)
                if (Traits::find(v._pointer, v._length, this->_pointer[i]) == nullptr)
                    return i;
            return npos;
        }

        constexpr size_type find_first_not_of(Char c, size_type pos = 0) const noexcept
        {
            return this->find_first_not_of(basic_string_view(addressof(c), 1), pos);
        }

        constexpr size_type find_first_not_of(const Char *s, size_type pos, size_type count) const
        {
            return this->find_first_not_of(basic_string_view(s, count), pos);
        }

        constexpr size_type find_first_not_of(const Char *s, size_type pos = 0) const
        {
            return this->find_first_not_of(basic_string_view(s), pos);
        }

        constexpr size_type find_last_not_of(basic_string_view v, size_type pos = npos) const noexcept
        {
            if (this->_length == 0)
                return npos;

            size_type i = min(this->_length - 1, pos);
            do
            {
                if (Traits::find(v._pointer, v._length, this->_pointer[i]) == nullptr)
                    return i;
            }
            while (i--);

            return npos;
        }

        constexpr size_type find_last_not_of(Char c, size_type pos = npos) const noexcept
        {
            return this->find_last_not_of(basic_string_view(addressof(c), 1), pos);
        }

        constexpr size_type find_last_not_of(const Char *s, size_type pos, size_type count) const
        {
            return this->find_last_not_of(basic_string_view(s, count), pos);
        }

        constexpr size_type find_last_not_of(const Char *s, size_type pos = npos) const
        {
            return this->find_last_not_of(basic_string_view(s), pos);
        }

        friend constexpr bool operator==(basic_string_view lhs, basic_string_view rhs) noexcept
        {
            return lhs.compare(rhs) == 0;
        }

        friend constexpr auto operator<=>(basic_string_view lhs, basic_string_view rhs) noexcept
        {
            return lhs.compare(rhs) <=> 0;
        }
    };

    using string_view = basic_string_view<char>;
    using wstring_view = basic_string_view<wchar_t>;

    template<>
    class hash<string_view>
    {
        public:
        size_t operator()(const string_view &str) const
        {
            return _hash(str.data(), str.length());
        }
    };

    template<>
    class hash<wstring_view>
    {
        public:
        size_t operator()(const wstring_view &str) const
        {
            return _hash(str.data(), str.length());
        }
    };

#if SV_RANGES
    template<typename Char, typename Traits>
    inline constexpr bool ranges::enable_borrowed_range<basic_string_view<Char, Traits>> = true;

    template<typename Char, typename Traits>
    inline constexpr bool ranges::enable_view<basic_string_view<Char, Traits>> = true;

    template<typename R>
    basic_string_view(R &&) -> basic_string_view<ranges::range_value_t<R>>;
#endif

    template<typename It, typename End>
    basic_string_view(It, End) -> basic_string_view<iter_value_t<It>>;

    inline namespace literals
    {
        inline namespace string_view_literals
        {
            inline string_view operator""sv(const char *str, size_t len)
            {
                return string_view(str, len);
            }

            inline wstring_view operator""sv(const wchar_t *str, size_t len)
            {
                return wstring_view(str, len);
            }
        } // inline namespace string_view_literals
    } // inline namespace literals
} // namespace std

using namespace std::literals::string_view_literals;
*/