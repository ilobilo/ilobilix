// Copyright (C) 2022  ilobilo

#pragma once

#include <frg/formatting.hpp>
#include <fmt/core.h>

namespace std
{
    template<typename ...Args>
    inline constexpr auto fmt(std::string_view fmt, Args &&...args) -> std::string
    {
        return fmt::vformat(fmt, fmt::make_format_args(args...));
    }

    template<typename ...Args>
    inline constexpr auto frg_fmt(std::string_view fmt, Args &&...args) -> std::string
    {
        struct
        {
            void append(char val) { this->_buffer += val; }
            void append(const char *val) { this->_buffer += val; }
            std::string _buffer;
        } formatter;

        frg::format(frg::fmt({ fmt.data(), fmt.length() }, args...), formatter);
        return formatter._buffer;
    }
} // namespace std