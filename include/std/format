// Copyright (C) 2022  ilobilo

#pragma once

#include <frg/formatting.hpp>
#include <fmt/core.h>

namespace std
{
    using namespace fmt;

    template<typename ...Args>
    inline constexpr auto fmt(std::string_view fmt, Args &&...args) -> std::string
    {
        return vformat(fmt, fmt::make_format_args(args...));
    }

    template<typename ...Args>
    inline constexpr auto frg_fmt(std::string_view fmt, Args &&...args) -> std::string
    {
        struct
        {
            void append(char val) { this->_buffer += val; }
            void append(const char *val) { this->_buffer += val; }
            std::string _buffer;
        } formatter;

        frg::format(frg::fmt({ fmt.data(), fmt.length() }, args...), formatter);
        return formatter._buffer;
    }
} // namespace std

// TODO: Should we support frg::format?
namespace frg
{
    template<typename F>
    void format_object(const std::string_view &object, format_options, F &formatter)
    {
        for (const auto c : object)
            formatter.append(c);
    }

    template<typename F>
    void format_object(const std::string &object, format_options, F &formatter)
    {
        formatter.append(object.c_str());
    }
} // namespace frg