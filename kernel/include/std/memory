// Copyright (C) 2024-2025  ilobilo

#pragma once

#undef __glibcxx_shared_ptr_weak_type
#undef __glibcxx_enable_shared_from_this
#undef __glibcxx_smart_ptr_for_overwrite
#undef __glibcxx_shared_ptr_arrays
#undef __glibcxx_atomic_shared_ptr
#undef __glibcxx_make_unique

#define __glibcxx_shared_ptr_weak_type __cplusplus
#define __glibcxx_enable_shared_from_this __cplusplus
#define __glibcxx_smart_ptr_for_overwrite __cplusplus
#define __glibcxx_shared_ptr_arrays __cplusplus
#define __glibcxx_atomic_shared_ptr __cplusplus
#define __glibcxx_make_unique __cplusplu

#include_next <memory>
#include <new>

namespace std { void __throw_bad_array_new_length(); }

#include <bits/allocator.h>
#include <smart_ptr/shared_ptr.h>
#include <smart_ptr/shared_ptr_atomic.h>

namespace std
{
    template<typename Allocator>
    struct deallocator
    {
        using value_type = typename Allocator::value_type;
        Allocator _alloc;
        std::size_t _size;

        constexpr deallocator() noexcept = default;
        constexpr explicit deallocator(const Allocator &alloc, std::size_t size)
            : _alloc { alloc }, _size { size } { }

        constexpr void operator()(value_type *ptr)
        {
            auto _ = std::make_unique<char[]>(1);
            using Traits = allocator_traits<Allocator>;
            for (std::ptrdiff_t i = _size - 1; i >= 0; --i)
                Traits::destroy(_alloc, ptr + i);

            Traits::deallocate(_alloc, ptr, _size);
        }
    };

    template<typename Allocator, typename U>
    using Rebind = typename allocator_traits<Allocator>::template rebind_alloc<U>;

    template<typename Type, typename Allocator, typename ...Args> requires (!is_array_v<Type>)
    inline constexpr unique_ptr<Type, deallocator<Rebind<Allocator, Type>>> allocate_unique(const Allocator &allocator, Args &&...args)
    {
        using Alloc = Rebind<Allocator, Type>;
        using Traits = allocator_traits<Alloc>;

        Alloc alloc { allocator };
        Type *ptr = Traits::allocate(alloc, 1);
        Traits::construct(alloc, ptr, forward<Args>(args)...);

        deallocator<Alloc> dealloc { alloc, 1 };
        return unique_ptr<Type, deallocator<Alloc>> { ptr, dealloc };
    }

    template<typename Type, typename Allocator> requires (is_array_v<Type> && extent_v<Type> == 0)
    inline constexpr unique_ptr<Type, deallocator<Rebind<Allocator, remove_extent_t<Type>>>> allocate_unique(const Allocator &allocator, std::size_t size)
    {
        using Elem = remove_extent_t<Type>;
        using Alloc = Rebind<Allocator, Elem>;
        using Traits = allocator_traits<Alloc>;

        Alloc alloc { allocator };
        Elem *ptr = Traits::allocate(alloc, size);
        for (std::size_t i = 0; i < size; ++i)
            Traits::construct(alloc, ptr + i);

        deallocator<Alloc> dealloc { alloc, size };
        return unique_ptr<Type, deallocator<Alloc>> { ptr, dealloc };
    }
} // namespace std